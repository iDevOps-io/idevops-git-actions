---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: -=app_name=-
  namespace: -=kubernetes_namespace=-
  labels:
    app: -=app_name=-
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
        maxSurge: -=max_surge=-
        maxUnavailable: -=max_unavailable=-
  selector:
    matchLabels:
      app: -=app_name=-
  template:
    metadata:
      labels:
        app: -=app_name=-
    spec:
      volumes:
      - name: -=app_name=-
        persistentVolumeClaim:
          claimName: -=app_name=-
      imagePullSecrets:
      - name: -=docker_pull_secret=-
      containers:
      - name:  -=app_name=-
        image: -=docker_org_name=-/-=image=-:-=image_tag=-
        livenessProbe:
          tcpSocket:
            port: -=port=-
          initialDelaySeconds: -=initial_delay=-
          periodSeconds: -=period_time=-
          successThreshold: -=success_threshold=-
          failureThreshold: -=failure_threshold=-
        readinessProbe:
          tcpSocket:
            port: -=port=-
          initialDelaySeconds: -=initial_delay=-
          periodSeconds: -=period_time=-
          successThreshold: -=success_threshold=-
          failureThreshold: -=failure_threshold=-
        ports:
        - name: portone
          containerPort: -=port=-
        volumeMounts:
        - mountPath: "-=mount_path=-"
          name: -=app_name=-
        env:
          - name: MONGO_USERNAME
            valueFrom:
              secretKeyRef:
                name: -=app_name=--secret
                key: MONGO_USERNAME
          - name: MONGO_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: -=app_name=--secret
                key: MONGO_ROOT_PASSWORD
---
apiVersion: v1
kind: Secret
metadata:
  name: -=app_name=--secret
  namespace: -=kubernetes_namespace=-
stringData:
  MONGO_USERNAME: -=MONGO_USERNAME=-
  MONGO_ROOT_PASSWORD: -=MONGO_ROOT_PASSWORD=-
---
apiVersion: v1
kind: Service
metadata:
  name: -=app_name=-
  namespace: -=kubernetes_namespace=-
  labels:
    name: -=app_name=-
spec:
  type: LoadBalancer
  selector:
    app: -=app_name=-
  ports:
    - name: -=port_name=-
      port: -=port=-
      targetPort: -=port=-
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: -=app_name=-
  namespace: -=kubernetes_namespace=-
spec:
  selector:
    matchLabels:
      app: -=app_name=-
  serviceName: -=app_name=-
  replicas: -=replicas=-
  template:
    metadata:
      name: -=app_name=-
      labels:
        app: -=app_name=-
    spec:
      containers:
      - name:  -=app_name=-
        image: -=image=-:-=image_tag=-
        command:
        - mongod
        - "--bind_ip"
        - "0.0.0.0"
        - "--replSet"
        - "rs0"
        lifeCycle:
          postStart:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  echo "-=app_name=--0.-=app_name=-.-=app_name=-.svc.cluster.local
                  -=app_name=--1.-=app_name=-.-=app_name=-.svc.cluster.local
                  -=app_name=--2.-=app_name=-.-=app_name=-.svc.cluster.local" >> /etc/hosts
        volumeMounts:
        - name: -=app_name=-
          mountPath: -=mount_path=-
  volumeClaimTemplates:
  - metadata:
      name: -=app_name=-
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: -=storage_class=-
      resources:
        requests:
          storage: -=disk_size=-
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: -=app_name=-
  name: -=app_name=-
  namespace: -=kubernetes_namespace=-
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: -=disk_size=-
  storageClassName: -=storage_class=-